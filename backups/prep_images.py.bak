import face_recognition
from PIL import Image
import os
import sys
import argparse
import concurrent.futures
from tqdm import tqdm

def is_image_file(filename):
    return filename.lower().endswith(('.jpg', '.jpeg', '.png'))

def crop_faces_centered(image_path, output_dir, padding=0.4):
    try:
        # Import piexif only if available
        try:
            from piexif import load as exif_load
            has_piexif = True
        except ImportError:
            print(f"Warning: piexif not installed. EXIF data will not be preserved.")
            has_piexif = False

        # Load image and EXIF
        pil_image = Image.open(image_path)
        exif_bytes = pil_image.info.get("exif", None) if has_piexif else None
        
        # Import numpy only if available
        try:
            import numpy as np
            has_numpy = True
        except ImportError:
            has_numpy = False
            
        # Use face_recognition's load_image_file as a safe fallback
        if has_numpy:
            # Resize large images before processing to avoid memory issues
            max_dim = 1500  # Maximum dimension for processing
            img_width, img_height = pil_image.size
            scale_factor = 1.0
            
            if max(img_width, img_height) > max_dim:
                scale_factor = max_dim / max(img_width, img_height)
                new_width = int(img_width * scale_factor)
                new_height = int(img_height * scale_factor)
                # Check PIL version for LANCZOS constant
                try:
                    resized_img = pil_image.resize((new_width, new_height), Image.LANCZOS)
                except AttributeError:
                    try:
                        # For older PIL versions
                        resized_img = pil_image.resize((new_width, new_height), Image.ANTIALIAS)
                    except AttributeError:
                        # Last resort - simple resize
                        resized_img = pil_image.resize((new_width, new_height))
                # Convert PIL image to numpy array for face_recognition
                image_array = np.array(resized_img)
            else:
                # Use original image if it's small enough
                image_array = np.array(pil_image)
        else:
            # Use face_recognition's built-in image loading without numpy
            image_array = face_recognition.load_image_file(image_path)
            scale_factor = 1.0

        face_locations = face_recognition.face_locations(image_array)
        landmarks_list = face_recognition.face_landmarks(image_array)

        if not face_locations:
            print(f"No faces detected in {image_path}")
            return 0

        base_name = os.path.splitext(os.path.basename(image_path))[0]
        os.makedirs(output_dir, exist_ok=True)

        faces_processed = 0
        for i, (face_box, landmarks) in enumerate(zip(face_locations, landmarks_list)):
            if "nose_tip" not in landmarks or not landmarks["nose_tip"]:
                continue

            # Get nose tip center
            nose_tip = landmarks["nose_tip"][len(landmarks["nose_tip"]) // 2]
            nose_x, nose_y = nose_tip
            
            # Apply inverse scaling to get coordinates in the original image
            if scale_factor != 1.0:
                nose_x = int(nose_x / scale_factor)
                nose_y = int(nose_y / scale_factor)

            # Estimate face size
            top, right, bottom, left = face_box
            face_height = bottom - top
            face_width = right - left
            
            # Apply inverse scaling to face dimensions
            if scale_factor != 1.0:
                face_height = int(face_height / scale_factor)
                face_width = int(face_width / scale_factor)
                top = int(top / scale_factor)
                right = int(right / scale_factor)
                bottom = int(bottom / scale_factor)
                left = int(left / scale_factor)

            # Add padding (expand width/height)
            pad_x = int(face_width * padding)
            pad_y = int(face_height * padding)

            # Desired crop box around nose
            crop_width = face_width + 2 * pad_x
            crop_height = face_height + 2 * pad_y

            # Centered on nose tip
            crop_left = max(0, nose_x - crop_width // 2)
            crop_top = max(0, nose_y - int(crop_height * 0.55))  # Shift upward for forehead
            crop_right = min(pil_image.width, crop_left + crop_width)
            crop_bottom = min(pil_image.height, crop_top + crop_height)

            face_crop = pil_image.crop((crop_left, crop_top, crop_right, crop_bottom))

            output_path = os.path.join(output_dir, f"{base_name}_face_{i+1}.jpg")
            face_crop.save(
                output_path,
                format="JPEG",
                quality=95,  # Slightly reduced quality to save space
                subsampling=0,
                exif=exif_bytes if exif_bytes else None
            )
            faces_processed += 1
            print(f"Saved: {output_path}")
            
        return faces_processed
            
    except Exception as e:
        print(f"Error processing {image_path}: {e}")
        return 0

def process_image(image_path, output_root):
    """Process a single image - used for parallel processing"""
    if not is_image_file(image_path):
        return 0
        
    base_name = os.path.splitext(os.path.basename(image_path))[0]
    output_dir = os.path.join(output_root, base_name)
    
    try:
        faces_detected = crop_faces_centered(image_path, output_dir)
        return faces_detected
    except Exception as e:
        print(f"Error processing {image_path}: {e}")
        return 0

def process_folder(folder_path, output_root="cropped_faces_nose_centered", max_workers=None):
    """Process all images in a folder with optional parallel processing"""
    if not os.path.isdir(folder_path):
        print(f"Invalid folder: {folder_path}")
        return
    
    os.makedirs(output_root, exist_ok=True)
    
    # Gather all image files
    image_files = []
    for file in os.listdir(folder_path):
        if is_image_file(file):
            image_files.append(os.path.join(folder_path, file))
    
    if not image_files:
        print("No image files found.")
        return
    
    print(f"Found {len(image_files)} images to process")
    
    total_faces = 0
    
    # Try to import tqdm - we need this here in case it's replaced by our fake version
    try:
        from tqdm import tqdm as tqdm_func
    except (ImportError, AttributeError):
        # Simple fallback if tqdm isn't available
        def tqdm_func(iterable, **kwargs):
            return iterable
    
    # Use parallel processing if more than one worker
    if max_workers != 1:
        try:
            # Use ThreadPoolExecutor for parallel processing
            with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
                # Create a dict mapping future to filename for better progress reporting
                future_to_file = {
                    executor.submit(process_image, img_path, output_root): img_path 
                    for img_path in image_files
                }
                
                # Process with progress bar
                for future in tqdm_func(concurrent.futures.as_completed(future_to_file), 
                                  total=len(image_files), 
                                  desc="Processing images"):
                    file_path = future_to_file[future]
                    try:
                        faces = future.result()
                        if faces > 0:
                            total_faces += faces
                    except Exception as e:
                        print(f"Error processing {file_path}: {e}")
        except Exception as e:
            print(f"Error with parallel processing: {e}")
            print("Falling back to sequential processing...")
            # Fall back to sequential processing
            for img_path in tqdm_func(image_files, desc="Processing images"):
                try:
                    faces = process_image(img_path, output_root)
                    if faces > 0:
                        total_faces += faces
                except Exception as e:
                    print(f"Error processing {img_path}: {e}")
    else:
        # Sequential processing
        for img_path in tqdm_func(image_files, desc="Processing images"):
            try:
                faces = process_image(img_path, output_root)
                if faces > 0:
                    total_faces += faces
            except Exception as e:
                print(f"Error processing {img_path}: {e}")
    
    print(f"Done. Processed {len(image_files)} images, detected {total_faces} faces.")

if __name__ == "__main__":
    # Check dependencies
    try:
        import numpy as np
    except ImportError:
        print("Error: NumPy is required. Please install with: pip install numpy")
        sys.exit(1)
        
    try:
        # Check if tqdm is available, but don't fail if not
        import tqdm
    except ImportError:
        print("Warning: tqdm not found. Progress bar will be disabled.")
        # Create a simple replacement for tqdm if it's not available
        class FakeTqdm:
            def __init__(self, iterable, **kwargs):
                self.iterable = iterable
                self.total = kwargs.get('total', None)
                self.current = 0
            
            def __iter__(self):
                return self
            
            def __next__(self):
                if self.iterable:
                    item = next(iter(self.iterable))
                    self.current += 1
                    if self.total:
                        print(f"Processing: {self.current}/{self.total}", end="\r")
                    return item
                raise StopIteration
        
        # Replace tqdm module with our fake version
        import sys
        sys.modules['tqdm'] = type('tqdm', (), {'tqdm': FakeTqdm})
        # Import our fake tqdm function
        tqdm = FakeTqdm
    
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Detect and crop faces centered on nose from images")
    parser.add_argument("input_folder", help="Path to folder containing images")
    parser.add_argument("--output", default="cropped_faces_nose_centered", 
                        help="Output folder for cropped faces (default: cropped_faces_nose_centered)")
    parser.add_argument("--workers", type=int, default=1, 
                        help="Number of worker threads (default: 1)")
    parser.add_argument("--padding", type=float, default=0.4, 
                        help="Padding around face as proportion of face size (default: 0.4)")
    parser.add_argument("--no-parallel", action="store_true", 
                        help="Disable parallel processing for compatibility")
    
    args = parser.parse_args()
    
    # If parallel processing is disabled, force workers to 1
    if args.no_parallel:
        args.workers = 1
        print("Parallel processing disabled. Using single thread mode.")
    
    try:
        process_folder(args.input_folder, args.output, args.workers)
    except KeyboardInterrupt:
        print("\nProcess interrupted by user. Exiting...")
        sys.exit(1)
    except Exception as e:
        print(f"\nError during processing: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)